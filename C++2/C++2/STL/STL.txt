1-1. STL이란?
- 표준 C++라이브러리
- 프로그램에 필요한 자료구조와 알고리즘을 Template으로 제공하는 라이브러리

1- 2. STL의 구성
1. 컨테이너(Container) - 객체들을 저장하는 객체,클래스 (자료구조)
2. 반복자(Iterator)    - 컨테이너에 있는 요소들을 순회, 접근하는 객체
3. 알고리즘(AIgorithm) - 데이터를 다루기 위한 함수(fin, sort, search 등)
4. 함수자(Functor)	   - 연산자를 오버로딩한 클래스의 객체

2-1. 컨테이너의 종류
1. 시퀀스 컨테이너 : 자료의 선형적인 집합, 입력되는 자료에 특별한 제약이나, 관리 규칙 없음
2. 연관 컨테이너 : 일정한 규칙에 따라 자료를 조직화하여 관리하는 컨테이너
3. 어댑터 컨테이너 : 시퀀스 컨테이너를 변형하여 미리 정해진 방식에 따라 관리하는 컨테이너

2-2. 컨테이너의 특징
- 컨테이너에 삽입이 이루어질 경우 내부적으로 복사본을 생성
- 컨테이너의 원소들을 인덱스를 가지고 있음

2-3. 컨테이너 주의사항
- 목적에 맞는 컨테이너 사용 (검색/ 삽입 / 삭제 / 인덱스 )
- == 연산자는 반드시 정의해야함 ( 동일함을 확인하기 위해)
- 연관 컨테이너를 사용할 경우 정렬 기준이 반드시 설정되어 있어야 함

2-4. 시퀀스 컨테이너

벡터(Vector)
-배열 기반 컨테이너 / 객체를 삽입하거나 제거할 때 자동으로 자신의 크기를 조정
- 삽입 / 삭제가 느림, 또한 삽입 / 삭제 시 반복자 무효화 현상이 일어날 수 있음
- 임의접근 반복자 사요


리스트(Iist)
- 이중 연결 리스트 , 느린 검색 , 접근(선형 시간 )을 가지고 있음
- 빠른 삽입 , 제거 시간( 상수 시간)을 가지고 있음
- 양방향 참조 반복자 사용

디큐(deque)
- 시작과 끝에서 삽입과 삭제를 상수시간에 수행하는 벡터
- 양방향 참조 반복자 사용

2-5. 연관 컨테이너
셋(set)
- 자가 균형 이진 탐색 트리를 사용해서 구현된 컨테이너
- 반드시 비교 연산 또는 명신된 커스텀 비교핮를 사용해야함
- 양방향 반복자 사용
- 중복요소를 허용하는  multimap이 있음

맵(map)
-연관 배열, 키에서 다른 값으로 매핑을 허용
- 키의 연산은 반드시 비교연산 또는 명신된 커스텀 비교자를 사용해야 함
- 원소를 key, value 두개 가지고 있음	(std::pair사용)
- 양방향 반복자 사용
- Multimap은 키의 중복 허용
- []연산자가 오버로딩 되어있어 키의 값을 넣을 수 있음(multimap에 서는 사용 불가능)
- []연산자는 포인터와 동작방식 다름 (양방향으로 순회하여 찾는 식)

2-6. 어댑터 컨테이너
큐(queue)
- FIFO 큐 인터페이스 제공
- push, pop, front, back 연산 제공

우선순위 큐(priotity_queue)
- 우선순위 큐 인터페이스 제공
 - push,pop,top 연산 제공

 스택(stack)
 -LIFO 스택 인터페이스 제공
 -push,pop,top 연산 재공

 3-1. 반복자(Iterator)
 - 컨테이너에 저장된 원소를 순회하고 접근하는 방법을 제공
 - 컨테이너와 알고리즘이 하나로 동작하게 만들어주는 인터페이스 역할

 3-3. 반복자  사용방법
 - 컨테이너 내부의 객체를 접근(*연산자)
 - 다음 원소로 이동하고 컨테이너의 모든 원소를 순회 (++,!=,==연산자)

 3-2. 반복자 종류
 종류						비고
 Input Iterator			: 값들의 시퀀스를 읽는 것에만 사용 됨
 Qutput Iterator		: 값들의 시퀀스를 쓰는 것에만 사용 됨
 Forward Iterator		: 읽고,쓰고 앞으로 움직일 수 있음
 Bidirectional Iterator	: Foward와 같지만 뒤로도 움직일 수 있음
 Random Acces Iterator	: 한 연산에서 어떤 수만큼이라도 자유롭게 움직일 수 있음