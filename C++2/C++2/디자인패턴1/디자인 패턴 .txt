1. 디자인 패턴이란?
- 상황에 맞게 설계되어 있는 프로그램 구조 패턴
- 재사용하기 편하게 만들어져 있음
- GoF 디자인 패턴이라고 부름

1-1. Gof 디자인 패턴 종류
1. 생성 패턴
2. 구조 패턴
3. 행위 패턴

3. 생성 패턴
이름				비고
Abstract Factory : 동일한 주제의 다른 팩토리를 묶어 줌
Builder			 : 생성한 표기를 분리한 객체를 생성
Factory Method	 : 생성할 객체의 클래스를 구한하지 않고 객체를 생성
Prototype		 : 기존 객체를 복제해서 객체를 생성
Singleton		 : 한 클래스에 하나의 객체만 존재하도록 제한

4. 구조 패턴
이름		비고   
Adapter		: 타 클래스의 인터페이스를 기존 인터 페읏에 덧씌움
Bridge		: 추상화와 구현을 분리해 둘을 각각 따로 발전 시킴
Composite	: 0개, 1개 혹은 그 이상의 객체를 묶어 사용
Decorator	: 기존 객체의 메소드에 새로운 행동을 추가하거나 오버라이드
Facade		: 많은 분량의 코드에 접근할 수 있는 단순한 인터페이스 제공
Flyweight	: 다수의 유사한 객체를 생성, 조작하는 비용을 절감할 수 있음
Proxy		: 접근이 힘든 객체에 대한 대역을 제공

5. 행위 패턴
이름						비고
Chain of Responsibility  책임들이 연결되어 있어 처리하지 못하는 일을 다른 책임자에게 넘어가는 구조 
Command					 하나의 추상클래스에 메소드를 생성하고 , 그에 맞는 서브 클래스가 명령을 수행하는 것
Interpreter				 SQL언어나 통신 프로토콜을 개발할 때 사용
Iterator				반복이 필요한 자료구조를 모두 동일한 인터페이스를 통해 접근할 수 있도록 설정
Mediator				데이터 수보다 연산횟수가 N배 더 많은 알고리즘 (비추천)	
Memento					Undo  기능 개발할 때 유용한 패턴, 클래스 설꼐 관점에서 객체 정보를 저장
Observer				어떤 클래스에 변화가 일어났을 때 ,변화를 감지하고 다른 클래스에 통보하는 것
state					동일한 동작을 객체의 상태에 따라 다르게 처리해야할 때 사용하는 디자인 패턴
strategy				알고리즘 군을 정의하고 각각 하나의 클래스로 캡슐화한 다음 필요할때 교환해서 사용
Template Mathod			상위 클래스에서는 추상적으로 표현하고 , 구체적인 내용은 하위 클래스에서 결정
Visitor					각 클래스 데이터 구조로부터 처리 기능을 분리해 별도의 visitor 클래스로 만들어 놓고 , 해당 클래스의 메소드가 각 클래스를 돌아다니며 특정 작업을 수행하는것
